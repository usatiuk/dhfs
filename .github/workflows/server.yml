name: Server

on:
  push:
    branches: ["main"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main"]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-dhfs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install sudo for ACT
        run: apt-get update && apt-get install -y sudo
        if: env.ACT=='true'

      - name: Install fuse and maven
        run: sudo apt-get update && sudo apt-get install -y libfuse2

      - name: Download maven
        run: |
          cd "$HOME"
          mkdir maven-bin
          curl -s -L https://dlcdn.apache.org/maven/maven-3/3.9.9/binaries/apache-maven-3.9.9-bin.tar.gz | tar xvz --strip-components=1 -C maven-bin
          echo "$HOME"/maven-bin/bin >> $GITHUB_PATH

      - name: Maven info
        run: |
          echo $GITHUB_PATH
          echo $PATH
          mvn -v

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "zulu"
          cache: maven

      - name: Test with Maven
        run: cd dhfs-parent && TESTCONTAINERS_USER="$(id -u):$(id -g)" mvn -T $(nproc) --batch-mode --update-snapshots package verify

      # - name: Build with Maven
      #   run: cd dhfs-parent && mvn --batch-mode --update-snapshots package # -Dquarkus.log.category.\"com.usatiuk.dhfs\".min-level=DEBUG

      - uses: actions/upload-artifact@v4
        with:
          name: DHFS Server Package
          path: dhfs-parent/dhfs-app/target/quarkus-app

      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: Test logs
          path: ./**/target/*-reports

  build-webui:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "webui/package.json"

      - name: NPM Install
        run: cd webui && npm i

      - name: NPM Build
        run: cd webui && npm run build

      - uses: actions/upload-artifact@v4
        with:
          name: Webui
          path: webui/dist

  build-native-libs:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            cross: "linux/amd64"
          - os: ubuntu-latest
            cross: "linux/arm64"
          - os: macos-latest

    runs-on: ${{ matrix.os }}
    env:
      DO_LOCAL_BUILD: ${{ matrix.os == 'macos-latest' }}
      DOCKER_PLATFORM: ${{ matrix.cross || 'NATIVE' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set SANITIZED_DOCKER_PLATFORM
        run: echo "SANITIZED_DOCKER_PLATFORM=$(echo $DOCKER_PLATFORM | tr / _ )" >> $GITHUB_ENV

      - name: Set DOCKER_BUILDER_IMAGE
        run: echo "DOCKER_BUILDER_IMAGE=dhfs_lib_builder-${{matrix.os}}-$SANITIZED_DOCKER_PLATFORM" >> $GITHUB_ENV

      - name: Build config
        run: |
          echo DO_LOCAL_BUILD: $DO_LOCAL_BUILD
          echo DOCKER_PLATFORM: $DOCKER_PLATFORM
          echo SANITIZED_DOCKER_PLATFORM: $SANITIZED_DOCKER_PLATFORM
          echo DOCKER_BUILDER_IMAGE: $DOCKER_BUILDER_IMAGE

      - name: Set up JDK 21
        if: ${{ env.DO_LOCAL_BUILD == 'TRUE' }}
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "zulu"
          cache: maven

      - name: Set up Docker Buildx
        if: ${{ env.DO_LOCAL_BUILD != 'TRUE' }}
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        if: ${{ env.DO_LOCAL_BUILD != 'TRUE' }}
        uses: docker/setup-qemu-action@v3

      - name: Build Docker builder image
        if: ${{ env.DO_LOCAL_BUILD != 'TRUE' }}
        uses: docker/build-push-action@v5
        with:
          context: ./libdhfs_support/builder
          file: ./libdhfs_support/builder/Dockerfile
          push: false
          platforms: ${{ env.DOCKER_PLATFORM }}
          tags: ${{ env.DOCKER_BUILDER_IMAGE }}
          cache-from: type=gha,scope=build-${{ env.DOCKER_BUILDER_IMAGE }}
          cache-to: type=gha,mode=max,scope=build-${{ env.DOCKER_BUILDER_IMAGE }}
          load: true

      - name: Build the library
        run: |
          CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release" libdhfs_support/builder/cross-build.sh both build "$(pwd)/result"

      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: NativeLib-${{ matrix.os }}-${{ env.SANITIZED_DOCKER_PLATFORM }}
          path: result

  merge-native-libs:
    runs-on: ubuntu-latest
    needs: [build-native-libs]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-libs

      - name: Merge all
        run: rsync -av downloaded-libs/NativeLib*/* result/

      - name: Check that libs exists
        run: |
          test -f "result/Linux-x86_64/libdhfs_support.so" || exit 1

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: NativeLibs
          path: result

  publish-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    needs: [build-webui, merge-native-libs, build-dhfs]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download server package
        uses: actions/download-artifact@v4
        with:
          name: DHFS Server Package
          path: dhfs-package-downloaded

      - name: Download webui
        uses: actions/download-artifact@v4
        with:
          name: Webui
          path: webui-dist-downloaded

      - name: Download native libs
        uses: actions/download-artifact@v4
        with:
          name: NativeLibs
          path: dhfs-native-downloaded

      - name: Show all the files
        run: find .

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: "v2.2.4"

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.ci
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

  publish-run-wrapper:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    needs: [build-webui, merge-native-libs, build-dhfs]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: DHFS Server Package
          path: dhfs-package-downloaded

      - uses: actions/download-artifact@v4
        with:
          name: Webui
          path: webui-dist-downloaded

      - uses: actions/download-artifact@v4
        with:
          name: NativeLibs
          path: dhfs-native-downloaded

      - name: Show all the files
        run: find .

      - name: Make run wrapper dirs
        run: mkdir -p run-wrapper-out/dhfs/data && mkdir -p run-wrapper-out/dhfs/fuse && mkdir -p run-wrapper-out/dhfs/app

      - name: Copy DHFS
        run: cp -r ./dhfs-package-downloaded "run-wrapper-out/dhfs/app/DHFS Package"

      - name: Copy Webui
        run: cp -r ./webui-dist-downloaded "run-wrapper-out/dhfs/app/Webui"

      - name: Copy Webui
        run: cp -r ./dhfs-native-downloaded "run-wrapper-out/dhfs/app/NativeLibs"

      - name: Copy run wrapper
        run: cp -r ./run-wrapper/* "run-wrapper-out/dhfs/app/"

      - name: Add version to run wrapper
        run: echo $GITHUB_RUN_ID > "run-wrapper-out/dhfs/app/"version

      - name: Tar run wrapper
        run: tar -cvf ~/run-wrapper.tar.gz ./run-wrapper-out

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: Run wrapper
          path: ~/run-wrapper.tar.gz
